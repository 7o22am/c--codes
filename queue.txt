#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include <bitset>
#include<queue>  // for queue , priority_queue
#include<deque>
using namespace std;
int main()
{
	// STL : Standard Template Library
	// Data , Algorithm , 
	// queue , dequeue , priority_queue


	/*
	queue
	used for ?
	decleration
	push
	pop
	back  // last
	front // first
	size
	empty
	*/
	queue <int> q;

	q.push(1); // o(1)

	q.push(2);

	q.push(3);  // 1 2 3

	 
	//q.pop(); // o(1)

	
	cout << q.front() << endl; // first elemnt 

	cout << q.back() << endl; // last elemnt 

	cout << q.size() << endl;

	cout << q.empty() << endl;

	while (!q.empty()){
		cout << q.front() << " ";
		q.pop();
	}
	
	// dequeue
	/*
	decleration
	push_back
	push_front
	pop_back
	pop_front
	size
	empty
	clear
	*/
	deque<int>de;

	de.push_back(1);  // 3 1 2

	de.push_back(2);  // back add to last 

	de.push_front(3);  // front  add to first

	de.pop_back(); // remove last elemnt 

	de.pop_front(); // remove first elemnt 

	cout << de.size() << endl;

	de.clear(); // clear dequeue

	cout << de.empty() << endl;




	for (int i = 0; i < de.size(); i++){
		cout << de[i] << endl;
	}

	/*
	priority_queue

	decleration
	push
	pop
	top
	size
	empty

	*/

	priority_queue<int> p1;
	priority_queue<int, vector<int>, greater<int> > p2;

	p1.push(1); // 1 2 3 
	
	p1.push(3);

	p1.push(2); // log(n)


	p1.pop(); // log(n)


	p1.top(); // o(1)

	cout << p1.empty() << endl;

	cout << p1.size() << endl;

	while (!p1.empty()){
		cout << p1.top() << endl;
		p1.pop();
	}


	
}